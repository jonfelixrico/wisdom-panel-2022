import type { CoreAPIQuote } from 'src/types/core-api/core-api-quote.interface'

/**
 * Generates approved quotes by default.
 * @param serverId
 * @param seq
 * @returns
 */
function generateBaseQuote(
  serverId: string,
  seq: number
): Partial<CoreAPIQuote> {
  const quoteId = `fodder-quote-${seq}`
  return {
    id: `fodder-quote-${seq}`,
    serverId,
    authorId: 'user-1',
    submitterId: 'user-2',
    content: `Fodder -- id ${quoteId} of server ${serverId}`,
    receives: [],
    submitDt: new Date('2022-01-01'),
    statusDeclaration: {
      status: 'APPROVED',
      timestamp: new Date('2022-01-01'),
    },
  }
}

export function generateFodderQuote(serverId: string, seq: number) {
  const generated = generateBaseQuote(serverId, seq)

  // we're using this to alternate between approved and pending
  if (seq % 2 === 0) {
    // quotes generated by are approved by default
    return generated
  }

  // we need to manipulate the data a bit if we want pending quotes
  generated.statusDeclaration = null
  generated.requiredVoteCount = 3
  generated.votes = {
    'user-1': new Date('2022-01-01'),
    'user-2': new Date('2022-01-01'),
  }
  generated.submitDt = new Date('2022-01-01')
  /*
   * Technically the quote would be expired by now since this date has passed,
   * but since we're not bothering with expired quotes for now this is good enough.
   */
  generated.expirationDt = new Date('2022-01-02')

  return generated
}

export function generateQuoteListData(count: number): Partial<CoreAPIQuote>[] {
  const list: Partial<CoreAPIQuote>[] = []

  for (let seq = 1; seq <= count; seq++) {
    list.push(generateFodderQuote('to_be_replaced', seq))
  }

  return list
}
